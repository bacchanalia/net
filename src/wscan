#!/usr/bin/perl
use strict;
use warnings;

my @networks;
my $wifiConf = "$ENV{HOME}/wifi.conf";
if(-e $wifiConf){
  use Safe;
  my $unsafeCode = `cat $wifiConf`;
  @networks = new Safe() -> reval($unsafeCode);
}

my $lastScanFile = "/tmp/wscan-last";
my $dev = `ifdev wlan`;
chomp $dev;

sub parseCell($);
sub trimPad($$);

sub cellSort($$){
  my ($a, $b) = @_;
  my $ret;
  $ret = $$a{ENCRYPTION} cmp $$b{ENCRYPTION};
  return $ret if $ret != 0;
  $ret = ($$b{QUALITY}=~/(\d+)/g)[0] <=> ($$a{QUALITY}=~/(\d+)/g)[0];
  return $ret if $ret != 0;
  $ret = $$a{SSID} cmp $$b{SSID};
  return $ret if $ret != 0;
  return 0;
}

sub main(@){
  my $iwlist;
  if(@_ == 0){
    system "sudo ifconfig $dev up";
    $iwlist = `sudo iwlist $dev scan`;
    if($? != 0){
      exit 1;
    }
    if($iwlist =~ s/^$dev\s*Scan completed :\n//){
      open FH, "> $lastScanFile";
      print FH $iwlist;
      close FH;
    }
  }elsif(@_ == 2 and $_[0] eq '-r' and $_[1] =~ /^\d+$/){
    my $delay = $_[1];
    my $scanDate = 0;
    if(-e $lastScanFile){
      $scanDate = `stat --format %Y $lastScanFile`;
      chomp $scanDate;
      $scanDate = 0 if not $scanDate =~ /^\d+$/;
    }
    my $now = `date +%s`;
    my $elapsed = $now - $scanDate;
    if($elapsed > $delay){
      print "wscan is out of date, rescanning\n";
      exec $0;
    }else{
      print "wscan is only $elapsed seconds old, skipping\n";
    }
    exit 0;
  }elsif(@_ == 1 and $_[0] eq '-l'){
    $iwlist = `cat $lastScanFile`;
  }else{
    die "Usage:
      $0
        perform a scan immediately
      $0 -l
        print results of last scan as if just invoked
      $0 -r  <delay>
        perform a scan only if last scan is delay seconds old\n";
  }

  my @cells = split /          Cell \d+ - /, $iwlist;
  shift @cells;

  my @parsedCells = map {parseCell $_} @cells;

  @parsedCells = sort {cellSort $a, $b} @parsedCells;

  for my $cell(@parsedCells){
    my $foundStr = '';
    for my $network(@networks){
      my $essid = $$network[0];
      if($$cell{SSID} eq $essid){
        $foundStr = "[$$network[3]]";
        last;
      }
    }
    print trimPad($$cell{SSID},       20) . " | " .
          trimPad($$cell{QUALITY},     4) . " | " .
          trimPad($$cell{ENCRYPTION},  4) . " | " .
          trimPad($foundStr, 5) . "\n";
  }
}




sub parseCell($){
  my $cell = shift;
  $cell =~ /\s*ESSID:"(.*)"/;
  my $essid = $1;
  $cell =~ /\s*Quality=(\d+)\/(\d+)/;
  my $quality = $2 == 0 ? '?' : int($1*100/$2)."%";
  $cell =~ /\s*Encryption key:(.*)/;
  my $enc = '?';
  if($1 eq 'on'){
    if($cell =~ /WPA2/){
      $enc = 'WPA2';
    }elsif($cell =~ /WPA/){
      $enc = 'WPA';
    }else{
      $enc = 'WEP';
    }
  }else{
    $enc = 'NONE';
  }
  return {
    SSID => $essid,
    QUALITY => $quality,
    ENCRYPTION => $enc,
  };
}

sub trimPad($$){
  my ($s, $l) = @_;
  if(length $s > $l){
    $s = substr($s, 0, $l-2) . "..";
  }
  return $s . ' 'x($l - length $s);
}

&main(@ARGV);
