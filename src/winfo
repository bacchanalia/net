#!/usr/bin/perl
use strict;
use warnings;

my $netConf = "$ENV{HOME}/wifi.conf";
my $autoConf = "$ENV{HOME}/wifi-auto.conf";

my $quotedStr = '"(?:[^"]|"")*"';
my $unquotedStr = '[^ \t"]*';
my $str = "(?:$quotedStr|$unquotedStr)";
my $lineRegex = qr/^\s*($str)\s*($str)\s*($str)\s*($str)\s*$/;

my $validEncs = "wep|wpa|none";
my $encDefault = 'none';
my $validModes = "ad-hoc|managed|master|repeater|secondary|monitor|auto";
my $modeDefault = 'managed';

my $usage = "Usage:
  $0 [--exact] SSID
    match the argument against $netConf and essids in the last scan,
      without regard to case, and with '_' matching ' ' or '_'.
    prints exact ssid, enc, key, mode, and auto
  $0 [--exact] --list-auto
    prints all auto-connectable SSIDs in config and their priority
    SSIDs are printed in lowercase, with ' ' replaced with '_'
  $0 [--exact] --list|--list-all
    prints all SSIDs in config
    SSIDs are printed in lowercase, with ' ' replaced with '_'

  --exact  Always print exact ssid
";

my $format = ''
  . "Entries are one per line:\n"
  . "SSID ENC KEY MODE\n"
  . "Attributes are whitespace-separated, doublequoted strings\n"
  . " any amount of leading and trailing whitespace/tabs is permitted\n"
  . " a literal doublequote character is represented by \"\"\n"
  . " double-quotes may be omitted if an att has no \"s or whitespace\n"
  . "Lines beginning with #s {or some whitespace and then a #} are ignored\n"
  . "SSID: <required> essid\n"
  . "ENC:  <optional> encryption mode {default = \"$encDefault\"}\n"
  . "      one of $validEncs \n"
  . "KEY:  <optional> wpa or wep key {default = \"\"}\n"
  . "      ASCII wep keys need 's:' at the front. hex keys do not.\n"
  . "      wpa PSK/TKIP keys cannot be given in hex; this is bad, probably\n"
  . "MODE: <optional> wifi mode {default = \"$modeDefault\"}\n"
  . "      one of $validModes\n"
;

sub dieConfig($;$){
  my $line = shift();
  my $reason = shift() || '';
  die "Malformed line in $netConf\n$format\nLine: '$line'\n$reason\n";
}
sub unquote($){
  my $s = shift;
  $s =~ s/^"|"$//g;
  $s =~ s/""/"/g;
  return $s;
}
sub parseLine($){
  my $line = shift;
  if($line =~ $lineRegex){
    my ($ssid, $enc, $key, $mode) = map {unquote $_} ($1, $2, $3, $4);
    $enc = $encDefault if $enc eq '';
    $mode = $modeDefault if $mode eq '';
    if(length $ssid == 0){
      dieConfig $line, "Error: SSID is empty";
    }elsif($enc !~ /^($validEncs)$/i){
      dieConfig $line, "Error: invalid: ENC $enc\n";
    }elsif($mode !~ /^($validModes)$/i){
      dieConfig $line, "Error: invalid: MODE $mode\n";
    }
    return [$ssid, $enc, $key, $mode];
  }else{
    dieConfig $line;
  }
}
sub fuzzy($){
  my $s = shift;
  $s = lc $s;
  $s =~ tr/ /_/;
  return $s;
}

sub main(@){
  my $exact = 0;
  $exact = shift if @_ >1 and $_[0] eq '--exact';
  my ($targetSSID, $listAll, $listAuto);
  if(@_ == 1 and $_[0] =~ /^(--list|--list-all)$/){
    $listAll = 1;
  }elsif(@_ == 1 and $_[0] eq '--list-auto'){
    $listAuto = 1;
  }elsif(@_ == 1){
    $targetSSID = shift;
  }else{
    die $usage;
  }

  my %entries;
  my %fuzzyEntries;
  open FH, "< $netConf" or die "Could not open $netConf for reading\n";
  my @lines = <FH>;
  close FH;
  for my $line(@lines){
    next if $line =~ /^\s*(#|$)/;
    my $entry = parseLine $line;
    my $ssid = $$entry[0];
    $entries{$ssid} = $entry;
    $fuzzyEntries{fuzzy($ssid)} = $entry;
  }

  my $count = 1;
  my %autos = map{chomp; ($_ => $count++)} `cat $autoConf 2>/dev/null`;

  if(defined $listAll){
    my @ssids = sort $exact ? keys %entries : keys %fuzzyEntries;
    print join("\n", @ssids) . "\n";
  }elsif(defined $listAuto){
    for my $ssid(sort {$autos{$a} <=> $autos{$b}} keys %autos){
      my $ssidFmt = $exact ? $ssid : fuzzy($ssid);
      print "$autos{$ssid}:$ssidFmt\n";
    }
  }elsif(defined $targetSSID){
    my $entry = $entries{$targetSSID};
    $entry = $fuzzyEntries{fuzzy $targetSSID} if not defined $entry;
    if(defined $entry){
      my ($ssid, $enc, $key, $mode) = @{$entry};
      my $auto = defined $autos{$ssid} ? $autos{$ssid} : '';
      print "ssid:$ssid\nenc:$enc\nkey:$key\nmode:$mode\nauto:$auto\n";
    }
  }
}

&main(@ARGV);
